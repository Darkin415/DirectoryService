// <auto-generated />
using System;
using System.Collections.Generic;
using DirectoryService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectoryService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DirectoryService.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("integer")
                        .HasColumnName("children_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("department_identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.Entities.Department.Name#DepartmentName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("department_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Path", "DirectoryService.Domain.Entities.Department.Path#Path", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("department_path");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("departments", "department");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentLocation", b =>
                {
                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.HasKey("LocationId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("department_location", "department");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentPosition", b =>
                {
                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("DepartmentPositionDepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DepartmentPositionPositionId")
                        .HasColumnType("uuid");

                    b.HasKey("PositionId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentPositionPositionId", "DepartmentPositionDepartmentId");

                    b.ToTable("department_position", "department");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Addresses")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("addresses");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.Entities.Location.Name#LocationName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("location_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TimeZone", "DirectoryService.Domain.Entities.Location.TimeZone#TimeZone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_timezone");
                        });

                    b.HasKey("Id");

                    b.ToTable("locations", "department");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "DirectoryService.Domain.Entities.Position.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("position_description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.Entities.Position.Name#PositionName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("position_name");
                        });

                    b.HasKey("Id");

                    b.ToTable("positions", "department");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Department", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Department", null)
                        .WithMany("ChildrenDepartments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentLocation", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Entities.Location", "Location")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentPosition", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Entities.Position", "Position")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Entities.DepartmentPosition", null)
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("DepartmentPositionPositionId", "DepartmentPositionDepartmentId");

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Department", b =>
                {
                    b.Navigation("ChildrenDepartments");

                    b.Navigation("DepartmentLocations");

                    b.Navigation("DepartmentPositions");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.DepartmentPosition", b =>
                {
                    b.Navigation("DepartmentPositions");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Location", b =>
                {
                    b.Navigation("DepartmentLocations");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Position", b =>
                {
                    b.Navigation("DepartmentPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
